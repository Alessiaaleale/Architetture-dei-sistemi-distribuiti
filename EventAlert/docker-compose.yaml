version: '3.8'

services:
  cassandra:
    image: cassandra:4.1
    container_name: cassandra
    ports:
      - "9042:9042"
    environment:
      - CASSANDRA_CLUSTER_NAME=EventCluster
    restart: on-failure

  subscriptions:
    build:
      context: ./services/subscriptions
    container_name: flask-app
    ports:
      - "8080:8080"
    depends_on:
      - cassandra
    restart: on-failure

  frontend:
    build:
      context: ./frontend
      dockerfile: dockerfile  
    container_name: frontend
    ports:
      - "3000:80"
    depends_on:
      - subscriptions
    restart: on-failure

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    restart: on-failure

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    restart: on-failure

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    restart: on-failure

  dispatcher:
    build:
      context: ./services/dispatcher
      dockerfile: dockerfile
    container_name: dispatcher
    depends_on:
      - kafka
      - redis
    restart: always
    command: python dispatcher.py

  nginx:
    image: nginx:latest
    container_name: eventalert-nginx
    ports:
      - "80:80"             
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - subscriptions
    restart: on-failure

  retry_worker:
    build:
      context: ./services/dispatcher
      dockerfile: dockerfile
    container_name: retry_worker
    depends_on:
      - redis
    command: python retry_worker.py